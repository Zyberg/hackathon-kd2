generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_CONNECTION_STRING")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique @default(uuid()) // this is a hacky way to allow user accounts without an email
  name     String?
  password String
  Role     Role    @relation(fields: [roleId], references: [id])
  roleId   Int

  groups UserGroupsOnUsers[]

  stravaProfile UserStravaProfile?

  challengesParticipant ChallengesOnUsers[] @relation("ChallengesParticipant")
  challengesInviter     ChallengesOnUsers[] @relation("ChallengesInviter")

  achievements AchievementsOnUsers[]
}

//TODO: avoid storing json
model UserStravaProfile {
  id_strava    Int    @id
  user         User   @relation(fields: [userId], references: [id])
  userId       Int    @unique
  accessToken  String @db.Text
  refreshToken String @db.Text
  data         Json?
}

model Role {
  id    Int    @id @default(autoincrement())
  user  User[]
  title String @unique
}

model UserGroup {
  id         Int                 @id @default(autoincrement())
  title      String
  categories UserGroupsOnUsers[]
}

model UserGroupsOnUsers {
  userGroup   UserGroup @relation(fields: [userGroupId], references: [id])
  userGroupId Int // relation scalar field (used in the `@relation` attribute above)

  user   User @relation(fields: [userId], references: [id])
  userId Int // relation scalar field (used in the `@relation` attribute above)

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userGroupId, userId])
}

model Challenge {
  id           Int                 @id @default(autoincrement())
  title        String
  description  String
  isActive     Boolean
  unit         ChallengeUnit       @relation(fields: [unitId], references: [id])
  unitId       Int // relation scalar field (used in the `@relation` attribute above)
  participants ChallengesOnUsers[]
}

model ChallengesOnUsers {
  id Int @id @default(autoincrement())

  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId Int // relation scalar field (used in the `@relation` attribute above)

  user   User @relation(fields: [userId], references: [id], name: "ChallengesParticipant")
  userId Int // relation scalar field (used in the `@relation` attribute above)

  userPoints PointsOnUserChallenge[]

  invitedAt   DateTime @default(now())
  invitedBy   User     @relation(fields: [invitedById], references: [id], name: "ChallengesInviter")
  invitedById Int // relation scalar field (used in the `@relation` attribute above)
}

model Achievement {
  id          Int    @id @default(autoincrement())
  title       String
  imagePath   String
  description String
  max_users   Int    @default(-1) // By default: unlimited

  users AchievementsOnUsers[]
}

model AchievementsOnUsers {
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId Int // relation scalar field (used in the `@relation` attribute above)

  user   User @relation(fields: [userId], references: [id])
  userId Int // relation scalar field (used in the `@relation` attribute above)

  @@id([achievementId, userId])
}

// TODO: is this is a good db structure?
model PointsOnUserChallenge {
  id    Int   @id @default(autoincrement())
  value Float @default(0)

  userChallenge   ChallengesOnUsers @relation(fields: [userChallengeId], references: [id])
  userChallengeId Int // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// TODO: maybe needs better relation challenge->user? [current: challenge->challengesOnUsers[->point ->user]
model ChallengeUnit {
  id         Int         @id @default(autoincrement())
  title      String
  challenges Challenge[]
}
